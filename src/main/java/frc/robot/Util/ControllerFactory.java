package frc.robot.Util;
import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.motorcontrol.Faults;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.StatusFrame;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.TalonSRXConfiguration;
import com.ctre.phoenix.motorcontrol.can.VictorSPX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import frc.robot.Constants;

public class ControllerFactory {
    public static WPI_TalonSRX talonSRX(int id, boolean inverted) {
        //Setup
        WPI_TalonSRX talon = new WPI_TalonSRX(id);
        talon.configFactoryDefault();
        talon.setInverted(inverted);
        talon.setSensorPhase(inverted);
        talon.configNeutralDeadband(Constants.driveNeutralDeadband, Constants.timeoutMs);
        talon.setNeutralMode(NeutralMode.Brake);

        //Encoder
        talon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, Constants.timeoutMs);

        //Current limiting
        TalonSRXConfiguration config = new TalonSRXConfiguration();
        config.peakCurrentLimit = 40; // the peak current, in amps
        config.peakCurrentDuration = 1500; // the time at the peak current before the limit triggers, in ms
        config.continuousCurrentLimit = 30; // the current to maintain if the peak limit is triggered
        talon.configAllSettings(config); // apply the config settings; this selects the quadrature encoder

        //Error SmartDashBoard DO LATER
        ErrorCode error = talon.getLastError(); // gets the last error generated by the motor controller
        Faults faults = new Faults();
        ErrorCode faultsError = talon.getFaults(faults); // fills faults with the current motor controller faults; returns the last error generated
        talon.setStatusFramePeriod(StatusFrame.Status_2_Feedback0, Constants.timeoutMs);

        return talon;
    }

    public static WPI_VictorSPX victorSPX(int id, boolean inverted, WPI_TalonSRX master) {
        //Setup
        WPI_VictorSPX victor = new WPI_VictorSPX(id);
        victor.configFactoryDefault();
        victor.setInverted(inverted);
        victor.setSensorPhase(inverted);
        victor.configNeutralDeadband(Constants.driveNeutralDeadband, Constants.timeoutMs);
        victor.setNeutralMode(NeutralMode.Coast);

        //follow
        victor.follow(master);

        return victor;
    }

    public static WPI_VictorSPX victorSPX(int id, boolean inverted) {
        //Setup
        WPI_VictorSPX victor = new WPI_VictorSPX(id);
        victor.configFactoryDefault();
        victor.setInverted(inverted);
        victor.setSensorPhase(inverted);
        victor.configNeutralDeadband(Constants.driveNeutralDeadband, Constants.timeoutMs);
        victor.setNeutralMode(NeutralMode.Coast);

        return victor;
    }

    public static CANSparkMax sparkMAX(int id, boolean inverted){
        CANSparkMax spark = new CANSparkMax(id, MotorType.kBrushless);
        spark.setSmartCurrentLimit(40);
  

        return spark;
    }
}
